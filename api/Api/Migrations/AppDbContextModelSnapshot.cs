// <auto-generated />
using System;
using Api.Repositories.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Api.Entities.Login", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<bool>("Deleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("deleted");

                    b.Property<byte[]>("EncryptedData")
                        .HasColumnType("Blob")
                        .HasColumnName("encrypted_data");

                    b.Property<int?>("EncryptionVersion")
                        .HasColumnType("int")
                        .HasColumnName("encryption_version");

                    b.Property<byte[]>("InitializationVector")
                        .HasColumnType("TinyBlob")
                        .HasColumnName("initialization_vector");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<Guid?>("VaultId")
                        .HasColumnType("char(36)")
                        .HasColumnName("vault_id");

                    b.HasKey("Id")
                        .HasName("pk_logins");

                    b.HasIndex("VaultId")
                        .HasDatabaseName("ix_logins_vault_id");

                    b.ToTable("logins");
                });

            modelBuilder.Entity("Api.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expires");

                    b.Property<string>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("token_hash");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_tokens_user_id");

                    b.ToTable("refresh_tokens");
                });

            modelBuilder.Entity("Api.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("Api.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password_hash");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("binary(16)")
                        .HasColumnName("salt");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated");

                    b.Property<string>("UsernameHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("username_hash");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("UsernameHash")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username_hash");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bffe53c5-f989-d5b7-9a55-0dca3d4d9df9"),
                            Created = new DateTime(2025, 7, 7, 15, 27, 43, 675, DateTimeKind.Utc).AddTicks(8010),
                            PasswordHash = "$argon2id$v=19$m=16,t=2,p=1$ZEp5eWdQeDBXeGk2OWh6Qw$/sfpIugCYAcUqDG3xmx/2g",
                            Salt = new byte[] { 249, 219, 140, 250, 128, 4, 70, 207, 35, 211, 96, 44, 23, 162, 4, 93 },
                            UsernameHash = "2E96772232487FB3A058D58F2C310023E07E4017C94D56CC5FAE4B54B44605F42A75B0B1F358991F8C6CBE9B68B64E5B2A09D0AD23FCAC07EE9A9198A745E1D5"
                        });
                });

            modelBuilder.Entity("Api.Entities.Vault", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_vaults");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_vaults_user_id");

                    b.ToTable("vaults");

                    b.HasData(
                        new
                        {
                            Id = new Guid("044ecf10-f1eb-4594-a2a7-cd4d5ba56355"),
                            Created = new DateTime(2025, 7, 7, 15, 27, 43, 793, DateTimeKind.Utc).AddTicks(7060),
                            Name = "Default Vault",
                            UserId = new Guid("bffe53c5-f989-d5b7-9a55-0dca3d4d9df9")
                        });
                });

            modelBuilder.Entity("LoginTag", b =>
                {
                    b.Property<Guid>("LoginId")
                        .HasColumnType("char(36)")
                        .HasColumnName("login_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("char(36)")
                        .HasColumnName("tags_id");

                    b.HasKey("LoginId", "TagsId")
                        .HasName("pk_login_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_login_tag_tags_id");

                    b.ToTable("login_tag");
                });

            modelBuilder.Entity("Api.Entities.Login", b =>
                {
                    b.HasOne("Api.Entities.Vault", null)
                        .WithMany()
                        .HasForeignKey("VaultId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_logins_vaults_vault_id");
                });

            modelBuilder.Entity("Api.Entities.RefreshToken", b =>
                {
                    b.HasOne("Api.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("Api.Entities.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_refresh_tokens_users_user_id");
                });

            modelBuilder.Entity("Api.Entities.Vault", b =>
                {
                    b.HasOne("Api.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vaults_users_user_id");
                });

            modelBuilder.Entity("LoginTag", b =>
                {
                    b.HasOne("Api.Entities.Login", null)
                        .WithMany()
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_login_tag_logins_login_id");

                    b.HasOne("Api.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_login_tag_tags_tags_id");
                });
#pragma warning restore 612, 618
        }
    }
}
